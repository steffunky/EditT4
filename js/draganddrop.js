// Generated by CoffeeScript 1.9.3
// file unchanged (same content as EditT3)
(function() {
  window.Dnd = (function() {
    var ROW = 'row';
    var COLUMN = 'column';
    var ITEM = 'item';
    var CLASS = 'class';

    function Dnd(table, notionFactory, tagsManager) {
      this.table = table;
      this.notionFactory = notionFactory;
      this.tagsManager = tagsManager;
      this.notions = [];
      this.$draggedElement = null;
      this.draggedClass = null;
      this.$ghost = null;
      this.elementType = "";
      this.isChrome = /chrom(e|ium)/.test(navigator.userAgent.toLowerCase());
      this.table.getTableNode().on({
        // When the table will be built, apply the events
        tableBuilt: (function(_this) {
          return function() {
            return _this.applyEvents();
          };
        })(this),
        // If an item have been moved, reapply the events on this
        itemMoved: (function(_this) {
          return function(e, $item) {
            return _this.applyItemEvents($item);
          };
        })(this),
        // If an item have been created, reapply the events on this
        itemCreated: (function(_this) {
          return function(e, $item) {
            return _this.applyItemEvents($item);
          };
        })(this),
        // If a row have been moved, reapply the events on this
        rowMoved: (function(_this) {
          return function(e, $row) {
            return _this.applyRowEvents($row);
          };
        })(this),
        // If a row have been created, reapply the events on this
        rowCreated: (function(_this) {
          return function(e, $row) {
            return _this.applyRowEvents($row);
          };
        })(this),
        // If a cell have been moved, reapply the events on this
        cellMoved: (function(_this) {
          return function(e, $cell) {
            return _this.applyCellEvents($cell);
          };
        })(this),
        // If a cell have been created, reapply the events on this
        cellCreated: (function(_this) {
          return function(e, $cell) {
            return _this.applyCellEvents($cell);
          };
        })(this),
        // If the header have been moved, reapply the events on this
        headerCellMoved: (function(_this) {
          return function(e, $headerCell) {
            return _this.applyHeaderCellEvents($headerCell);
          };
        })(this),
        // If the header have been created, reapply the events on this
        headerCellCreated: (function(_this) {
          return function(e, $headerCell) {
            return _this.applyHeaderCellEvents($headerCell);
          };
        })(this)
      });
      this.notionFactory.getNotionFactoryNode().on({
        // If a notion have been created, when a class will be built with this notion apply drag events
        notionCreated: (function(_this) {
          return function(e, notion) {
            return notion.getNotionNode().on({
              classCreated: function(e, class_instance) {
                return _this.applyDragEvents(class_instance.getClassNode(), class_instance);
              }
            });
          };
        })(this)
      });
    }

    // Check if the destination is the same than the dragged element
    Dnd.prototype.isTheDraggedElement = function($target) {
      if ($target.is(this.$draggedElement)) {
        return true;
      }
      return false;
    };

    // Hack to get a ghost of our element we drag
    Dnd.prototype.setGhost = function($clonedElement, e) {
      this.$ghost = $clonedElement;
      if (this.isChrome) {
        this.$ghost.css({
          position: 'absolute',
          bottom: '-100px',
          right: '-100px'
        });
      } else {
        this.$ghost.css({
          position: 'absolute',
          top: '-1000px',
          left: '-1000px'
        });
      }
      $('body').append(this.$ghost);
      return e.originalEvent.dataTransfer.setDragImage(this.$ghost.get(0), 0, 0);
    };

    Dnd.prototype.applyHeaderCellEvents = function($element) {
      this.applyDragEvents($element);
      return this.applyDropEvents($element);
    };

    Dnd.prototype.applyCellEvents = function($element) {
      return this.applyDropEvents($element);
    };

    Dnd.prototype.applyItemEvents = function($element) {
      this.applyDragEvents($element);
      return $element.jqResize('.item-resize');
    };

    Dnd.prototype.applyRowEvents = function($element) {
      this.applyDragEvents($element);
      return this.applyDragOverEvents($element);
    };

    Dnd.prototype.applyDragEvents = function($element, dragged_class) {
      var onDrag;
      onDrag = (function(_this) {
        return function(e) {
          var $clonedElement, $my_elem, column;
          _this.table.setMouseDown(false);
          _this.draggedClass = dragged_class != null ? dragged_class : null;
          // If the user wants to move a column
          if ($(e.target).hasClass('column')) {
            _this.elementType = COLUMN;
            _this.$draggedElement = $(e.target);
            // Build the column for the ghost image
            //column = _this.table.getNumColumn(_this.$draggedElement);
            $my_elem = $('<table></table>');
            //_this.table.getColumn(column).each(function(i, elem) {
              //var $line;
              //$line = _this.table.createLine();
              //$line.append($(elem).clone());
              //return $my_elem.append($line);
          //});
            _this.setGhost($my_elem, e);
          // Or a row
          } else if ($(e.target).hasClass('row')) {
            $clonedElement = $(e.target).parent('tr').clone();
            $my_elem = $('<table></table>');
            $my_elem.append($clonedElement);
            _this.setGhost($my_elem, e);
            _this.elementType = ROW;
            _this.$draggedElement = $(e.target).parent('tr');
          // A class
          } else if ($(e.target).hasClass('notion_class')) {
            _this.elementType = CLASS;
            _this.$draggedElement = $(e.target);
          // Or if he wants to move an item
          } else {
            _this.elementType = ITEM;
            _this.$draggedElement = $(e.target);
            _this.$draggedElement.parent().removeClass('selected');
          }
          return e.originalEvent.dataTransfer.setData('text/plain', ''); // Needed by Firefox (<3)
        };
      })(this);
      // In the case where it's not the case (trololo)
      $element.attr('draggable', 'true');

      // Save the dragged element, and its type in dndHandler's variables
      return $element.on({
        dragstart: onDrag
      });
    };

    Dnd.prototype.applyDragOverEvents = function($element) {
      var onDragLeave, onDragOver;
      onDragOver = (function(_this) {
        return function(e) {
          var $tr, i, j, ref, ref1, rowspan;
          if (_this.elementType === ROW) {
            $tr = $(e.target).closest('tr');
            rowspan = (ref = $tr.find('td').eq(0).attr('rowspan')) != null ? ref : 1;
            for (i = j = 1, ref1 = rowspan - 1; j <= ref1; i = j += 1) {
              $tr = $tr.next();
            }
            return $tr.addClass('drag_hovering');
          }
        };
      })(this);
      onDragLeave = (function(_this) {
        return function(e) {
          var $tr, i, j, ref, ref1, rowspan;
          if (_this.elementType === ROW) {
            $tr = $(e.target).closest('tr');
            rowspan = (ref = $tr.find('td').eq(0).attr('rowspan')) != null ? ref : 1;
            for (i = j = 1, ref1 = rowspan - 1; j <= ref1; i = j += 1) {
              $tr = $tr.next();
            }
            return $tr.removeClass('drag_hovering');
          }
        };
      })(this);
      return $element.on({
        dragover: onDragOver,
        dragleave: onDragLeave
      });
    };

    Dnd.prototype.applyDropEvents = function($dropper) {
      var onDrop;
      onDrop = (function(_this) {
        return function(e) {
          var $clonedElement, $draggedElement, $target, instance;
          $target = null;
          $draggedElement = _this.$draggedElement;
          $clonedElement = null;
          if (_this.draggedClass == null) {
            $clonedElement = $draggedElement.clone();
          }
          // Remove the ghost if it exists
          if ((_this.$ghost != null)) {
            _this.$ghost.remove();
            _this.$ghost = null;
          }

          // If it's a column
          if (_this.elementType === COLUMN) {
            $target = $(e.target);
            // Be sure we target a td/th element
            while (!$target.is('tr, th')) {
              $target = $target.parent();
            }
            _this.table.moveColumn($draggedElement, $clonedElement, $target);
          // If it's a row
          } else if (_this.elementType === ROW) {
            $target = $(e.target).parent('tr');
            $target.removeClass('drag_hovering');
            if (_this.isTheDraggedElement($target) === false) {
              _this.table.moveRow($draggedElement, $clonedElement, $target);
            }
          // If it's a class
          } else if (_this.elementType === CLASS) {
            $target = $(e.target);
            // Maybe the user drop on another item (which is in a td cell), so just need to put the item in the parent cell
            if ($target.prop('tagName') !== 'TD') {
              $target = $target.parent('td');
            }
            if (_this.table.getHeaderCellContent($target) === _this.draggedClass.getNotionName() && $target.hasClass('cell')) {
              instance = _this.draggedClass.createInstance(_this.tagsManager.getHashTags());
              instance.updateColorAndDisplayNodes(_this.tagsManager.getDefaultColors(), _this.tagsManager.getTagsConf());
              $clonedElement = instance.getInstanceNode();
              _this.table.createItem($clonedElement, $target);
            }
          // An item
          } else {
            $target = $(e.target);
            // Maybe the user drop on another item (which is in a td cell), so just need to put the item in the parent cell
            if ($target.prop('tagName') !== 'TD') {
              $target = $target.parent('td');
            }
            // Only move an item in a cell
            if (_this.table.getNumColumn($target) === _this.table.getNumColumn(_this.$draggedElement.parent('td')) && $target.hasClass('cell')) {
              _this.table.moveItem($draggedElement, $clonedElement, $target);
            }
          }
          // Reset
          _this.draggedClass = null;
          // MouseUp of document don't fire so set mouseDown manually
          return _this.table.setMouseDown(false);
        };
      })(this);
      return $dropper.on({
        dragover: (function(_this) {
          return function(e) {
            return e.preventDefault();
          };
        })(this),
        drop: onDrop
      });
    };

    Dnd.prototype.applyEvents = function() {
      var $draggables, $droppers, $table, elem, j, k, len, len1, results;
      $table = this.table.getTableNode();
      $draggables = $table.find('.draggable');
      for (j = 0, len = $draggables.length; j < len; j++) {
        elem = $draggables[j];
        this.applyDragEvents($(elem));
      }
      $droppers = $table.find('.dropper');
      results = [];
      for (k = 0, len1 = $droppers.length; k < len1; k++) {
        elem = $droppers[k];
        results.push(this.applyDropEvents($(elem)));
      }
      return results;
    };

    return Dnd;

  })();

}).call(this);
